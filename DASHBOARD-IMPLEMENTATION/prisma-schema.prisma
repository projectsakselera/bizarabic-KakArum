// Prisma Schema for BizArabic for ESQ165 Dashboard
// Database: PostgreSQL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// USERS & AUTHENTICATION
// ============================================

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // Hashed
  role          UserRole  @default(STUDENT)

  // ESQ-specific fields
  organization  String    @default("ESQ 165")
  position      String?
  joinedAt      DateTime  @default(now())

  // Relations
  accounts      Account[]
  sessions      Session[]
  progress      Progress[]
  quizAttempts  QuizAttempt[]
  assignments   Assignment[]
  forumPosts    ForumPost[]
  chatMessages  ChatMessage[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([email])
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ============================================
// LEARNING CONTENT
// ============================================

model Course {
  id          String    @id @default(cuid())
  title       String    // "BizArabic for ESQ165"
  titleArabic String    // Arabic title
  description String    @db.Text
  tagline     String    // "From Language to Culture to Partnership"
  level       Int       @default(1)
  totalSessions Int     @default(8)

  sessions    LearningSession[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model LearningSession {
  id              String    @id @default(cuid())
  courseId        String
  sessionNumber   Int       // 1-8
  title           String    // "Opening Doors"
  titleArabic     String    // "فتح الأبواب"
  subtitle        String?   // "Introductions & First Impressions"
  phase           String    // "Foundation", "Practical Skills", etc.

  // Content
  description     String    @db.Text
  learningObjectives String[] // Array of objectives
  duration        Int       // Duration in minutes

  // Module content (Markdown or JSON)
  moduleContent   String    @db.Text

  // Presentation
  presentationSlides Json?   // Slide data
  trainerScript   String?   @db.Text

  // Status
  isPublished     Boolean   @default(false)
  publishedAt     DateTime?
  order           Int       // Display order

  // Relations
  course          Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  vocabularies    Vocabulary[]
  quizzes         Quiz[]
  assignments     Assignment[]
  progress        Progress[]

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([courseId, sessionNumber])
  @@index([courseId, order])
}

model Vocabulary {
  id              String    @id @default(cuid())
  sessionId       String

  // Vocabulary data
  arabic          String    // Arabic script
  transliteration String    // Latin script
  english         String    // English translation
  category        String?   // "Greetings", "Family", etc.
  audioUrl        String?   // Link to pronunciation audio
  example         String?   // Example usage

  // Flashcard data
  difficulty      Int       @default(1) // 1-5

  session         LearningSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([sessionId, category])
}

// ============================================
// ASSESSMENTS
// ============================================

model Quiz {
  id              String    @id @default(cuid())
  sessionId       String
  title           String    // "Session 1 Assessment"
  titleArabic     String?

  // Quiz config
  duration        Int       // Duration in minutes
  passingScore    Int       @default(75) // Percentage
  maxAttempts     Int?      // Null = unlimited

  // Weights
  listeningWeight Float     @default(0.20)
  readingWeight   Float     @default(0.20)
  writingWeight   Float     @default(0.25)
  speakingWeight  Float     @default(0.25)
  culturalWeight  Float     @default(0.10)

  // Questions (JSON structure)
  questions       Json      // Array of question objects

  // Relations
  session         LearningSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  attempts        QuizAttempt[]

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([sessionId])
}

model QuizAttempt {
  id              String    @id @default(cuid())
  quizId          String
  userId          String
  attemptNumber   Int       // 1, 2, 3...

  // Answers (JSON structure)
  answers         Json      // User's answers

  // Scores by section
  listeningScore  Float?
  readingScore    Float?
  writingScore    Float?
  speakingScore   Float?    // Manually graded
  culturalScore   Float?

  // Overall
  totalScore      Float?    // Calculated weighted score
  passed          Boolean   @default(false)

  // Grading
  autoGraded      Boolean   @default(false) // Auto-gradeable sections done
  manualGraded    Boolean   @default(false) // Speaking/writing graded
  gradedBy        String?   // Instructor ID
  gradedAt        DateTime?
  feedback        String?   @db.Text

  // Timing
  startedAt       DateTime  @default(now())
  submittedAt     DateTime?
  completedAt     DateTime? // Fully graded

  // Relations
  quiz            Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([quizId, userId, attemptNumber])
  @@index([userId])
  @@index([quizId])
}

model Assignment {
  id              String    @id @default(cuid())
  sessionId       String
  userId          String
  type            AssignmentType

  // Assignment data
  title           String
  description     String    @db.Text
  instructions    String    @db.Text

  // Submission
  fileUrl         String?   // S3 URL for video/audio
  transcript      String?   @db.Text // Optional transcript
  submittedAt     DateTime?

  // Grading
  score           Float?    // Out of total points
  totalPoints     Float     @default(25)
  feedback        String?   @db.Text
  gradedBy        String?   // Instructor ID
  gradedAt        DateTime?

  // Status
  status          AssignmentStatus @default(NOT_STARTED)
  dueDate         DateTime?

  // Relations
  session         LearningSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([userId, sessionId])
  @@index([status])
}

enum AssignmentType {
  VIDEO_INTRODUCTION
  AUDIO_DIALOGUE
  WRITTEN_ESSAY
  PRESENTATION
  FINAL_PROJECT
}

enum AssignmentStatus {
  NOT_STARTED
  IN_PROGRESS
  SUBMITTED
  GRADED
}

// ============================================
// PROGRESS TRACKING
// ============================================

model Progress {
  id              String    @id @default(cuid())
  userId          String
  sessionId       String

  // Progress indicators
  moduleViewed    Boolean   @default(false)
  moduleCompletedAt DateTime?

  quizAttempted   Boolean   @default(false)
  quizPassed      Boolean   @default(false)
  bestQuizScore   Float?

  assignmentSubmitted Boolean @default(false)
  assignmentGraded    Boolean @default(false)
  assignmentScore     Float?

  // Overall
  completed       Boolean   @default(false)
  completedAt     DateTime?

  // Time tracking
  timeSpent       Int       @default(0) // Minutes
  lastAccessedAt  DateTime  @default(now())

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  session         LearningSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([userId, sessionId])
  @@index([userId])
  @@index([sessionId])
}

// ============================================
// PRACTICE & AI
// ============================================

model FlashcardProgress {
  id              String    @id @default(cuid())
  userId          String
  vocabularyId    String

  // Spaced repetition
  level           Int       @default(0) // 0-5 (mastery level)
  lastReviewed    DateTime  @default(now())
  nextReview      DateTime  @default(now())
  correctCount    Int       @default(0)
  incorrectCount  Int       @default(0)

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([userId, vocabularyId])
  @@index([userId, nextReview])
}

model ChatMessage {
  id              String    @id @default(cuid())
  userId          String
  role            String    // "user" or "assistant"
  content         String    @db.Text
  sessionContext  String?   // Which session the chat is about

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt       DateTime  @default(now())

  @@index([userId, createdAt])
}

model PronunciationAttempt {
  id              String    @id @default(cuid())
  userId          String
  phrase          String    // Target phrase
  audioUrl        String    // User's recording

  // AI Analysis
  score           Float?    // 0-100
  feedback        String?   @db.Text
  correctPhonemes String[]  // Which sounds were correct
  incorrectPhonemes String[] // Which need work

  createdAt       DateTime  @default(now())

  @@index([userId, createdAt])
}

// ============================================
// COMMUNITY
// ============================================

model ForumPost {
  id              String    @id @default(cuid())
  userId          String
  sessionId       String?   // Optional: related session

  title           String
  content         String    @db.Text
  isQuestion      Boolean   @default(false)

  // Engagement
  views           Int       @default(0)
  likes           Int       @default(0)

  // Status
  isPinned        Boolean   @default(false)
  isLocked        Boolean   @default(false)

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  replies         ForumReply[]

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([userId])
  @@index([sessionId])
  @@index([createdAt])
}

model ForumReply {
  id              String    @id @default(cuid())
  postId          String
  userId          String    // Reference to User (not explicit relation to avoid circularity)
  content         String    @db.Text

  // Engagement
  likes           Int       @default(0)
  isAcceptedAnswer Boolean  @default(false) // For questions

  post            ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([postId])
  @@index([createdAt])
}

// ============================================
// RESOURCES
// ============================================

model Resource {
  id              String    @id @default(cuid())
  title           String
  titleArabic     String?
  description     String    @db.Text
  type            ResourceType

  // File/URL
  url             String    // S3 URL or external link
  fileSize        Int?      // Bytes
  duration        Int?      // For audio/video (seconds)

  // Categorization
  category        String    // "Apps", "Videos", "Books", "Articles"
  sessionId       String?   // Optional: related session
  tags            String[]  // Searchable tags

  // Access
  isPublic        Boolean   @default(true)
  downloadCount   Int       @default(0)

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([type, category])
  @@index([sessionId])
}

enum ResourceType {
  PDF
  VIDEO
  AUDIO
  LINK
  IMAGE
}

// ============================================
// ANALYTICS
// ============================================

model ActivityLog {
  id              String    @id @default(cuid())
  userId          String
  action          String    // "view_session", "start_quiz", "submit_assignment"
  entityType      String?   // "session", "quiz", "assignment"
  entityId        String?
  metadata        Json?     // Additional data

  createdAt       DateTime  @default(now())

  @@index([userId, createdAt])
  @@index([action])
}

// ============================================
// NOTIFICATIONS
// ============================================

model Notification {
  id              String    @id @default(cuid())
  userId          String
  type            NotificationType
  title           String
  message         String    @db.Text

  // Related entity
  entityType      String?
  entityId        String?
  actionUrl       String?   // Where to go when clicked

  // Status
  isRead          Boolean   @default(false)
  readAt          DateTime?

  createdAt       DateTime  @default(now())

  @@index([userId, isRead, createdAt])
}

enum NotificationType {
  ASSIGNMENT_DUE
  ASSIGNMENT_GRADED
  QUIZ_AVAILABLE
  SESSION_UNLOCKED
  INSTRUCTOR_MESSAGE
  FORUM_REPLY
  ACHIEVEMENT
}
